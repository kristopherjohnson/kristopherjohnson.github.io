<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Undefined Value - 2004</title><link href="http://undefinedvalue.com/" rel="alternate"></link><link href="http://undefinedvalue.com/feeds/2004.atom.xml" rel="self"></link><id>http://undefinedvalue.com/</id><updated>2004-09-05T22:25:00-04:00</updated><entry><title>Hobbies</title><link href="http://undefinedvalue.com/hobbies.html" rel="alternate"></link><published>2004-09-05T22:25:00-04:00</published><updated>2004-09-05T22:25:00-04:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-09-05:/hobbies.html</id><summary type="html">&lt;p&gt;For most of my adult life, I didn't really have any "hobbies". I spent
most of my free time watching TV, reading books, hanging out with
friends, or improving my programming skills. I didn't consider any of
these activities to be hobbies, and always wondered if I was missing out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For most of my adult life, I didn't really have any "hobbies". I spent
most of my free time watching TV, reading books, hanging out with
friends, or improving my programming skills. I didn't consider any of
these activities to be hobbies, and always wondered if I was missing out
on the fun others had with their hobbies.&lt;/p&gt;
&lt;p&gt;A couple of years ago, when I quit my job to take time off work, I made
an effort to develop some hobbies. I took sailing lessons, and joined
the local sailing club. I got into digital photography, taking pictures
of my young nieces and messing around with the pictures in Photoshop. I
tried creating music using Cakewalk's SONAR digital audio production
product.&lt;/p&gt;
&lt;p&gt;I didn't really stick with any of those hobbies, but they were fun and
led me to try some other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;home-brew beer&lt;/li&gt;
&lt;li&gt;self-taught piano lessons&lt;/li&gt;
&lt;li&gt;juggling&lt;/li&gt;
&lt;li&gt;RC helicopters&lt;/li&gt;
&lt;li&gt;electronics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I came pretty close to getting into aquariums a couple of weeks ago. I
was going to create a mini-reef marine aquarium, one of the most
difficult to maintain. After reading a couple of books, I finally
decided against it. The helicopter hobby is pretty expensive, and this
marine aquarium thing looked like it could be even worse. So I've
decided to put it off until I buy a house or until I give up the
helicopters.&lt;/p&gt;
&lt;p&gt;One concern about my choice of hobbies is that none of them involve
other people. Sure, I "chat" with other hobbyists online who share these
hobbies, but I never actually interact with anyone. I need to find
something that interests me that will get me into groups of people.&lt;/p&gt;
&lt;p&gt;All these hobbies are really cutting into my TV-watching time. And one
of these days, I may need to re-classify house-cleaning as a hobby so
that I can find time to do that.&lt;/p&gt;</content><category term="hobbies"></category><category term="self-indulgence"></category></entry><entry><title>Web Site Reconfiguration</title><link href="http://undefinedvalue.com/web-site-reconfiguration.html" rel="alternate"></link><published>2004-07-04T13:57:00-04:00</published><updated>2004-07-04T13:57:00-04:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-07-04:/web-site-reconfiguration.html</id><summary type="html">&lt;p&gt;My web hosting provider was bought out by another provider. That new
provider has now "upgraded" my old account by moving it to their
servers. So now all my CGI scripts aren't working, and I can't use FTP
or SSH to fix them. Grrr.&lt;/p&gt;
&lt;p&gt;Thank you iQuest Hosting.&lt;/p&gt;</summary><content type="html">&lt;p&gt;My web hosting provider was bought out by another provider. That new
provider has now "upgraded" my old account by moving it to their
servers. So now all my CGI scripts aren't working, and I can't use FTP
or SSH to fix them. Grrr.&lt;/p&gt;
&lt;p&gt;Thank you iQuest Hosting.&lt;/p&gt;</content><category term="hosting"></category><category term="rant"></category></entry><entry><title>iPod mini</title><link href="http://undefinedvalue.com/ipod-mini.html" rel="alternate"></link><published>2004-05-16T16:06:00-04:00</published><updated>2004-05-16T16:06:00-04:00</updated><author><name>Kris Johnson (noreply@blogger.com)</name></author><id>tag:undefinedvalue.com,2004-05-16:/ipod-mini.html</id><summary type="html">&lt;p&gt;I bought an iPod mini yesterday. It felt good to buy an Apple product
again, after giving up on the Macintosh a few years back.&lt;/p&gt;
&lt;p&gt;I've started exercising (This time I'll stick with it! Really!), and so
I wanted a music player to help pass the time and to keep …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I bought an iPod mini yesterday. It felt good to buy an Apple product
again, after giving up on the Macintosh a few years back.&lt;/p&gt;
&lt;p&gt;I've started exercising (This time I'll stick with it! Really!), and so
I wanted a music player to help pass the time and to keep my mind off my
aching muscles.&lt;/p&gt;
&lt;p&gt;I've given up on cassette and CD players, due to the hassle of lugging
all those tapes and discs around. I've tried using Windows Media Player
on my Pocket PC, but the low amount of memory on a SD memory card
limited me to just a couple dozen songs. I've looked at MP3 players, but
was underwhelmed. The mini is $250, which seemed a bit high for a music
player, but I decided that the benefits are worth the price. Once I
decided to spend the money, I considered getting one of the full-size
iPods, which cost more but have lots more space. I decided to get the
mini due to the more attractive weight and form factor; price wasn't
really a consideration.&lt;/p&gt;
&lt;p&gt;I have a couple of complaints. One is that there is a brief pause
between tracks. I listen to a lot of albums that don't have pauses
between songs (Pink Floyd, for example), and so it is annoying to have
that brief stutter between songs when listening on the iPod. My other
complaint is that iTunes will only import one CD at a time. I've got two
CD drives connected to my PC, and it would be nice if it could rip two
CDs simultaneously as I build up my library.&lt;/p&gt;
&lt;p&gt;The Apple Music Store is a nice feature. I bought a few audiobooks
(Steve Martin, George Carlin, and a couple others) and also tried out
Anton Fig's album. I tried buying a John Coltrane album, but got an
error message; I'll have to try that one again later.&lt;/p&gt;</content><category term="ipod"></category><category term="itunes"></category><category term="apple"></category></entry><entry><title>New Projects</title><link href="http://undefinedvalue.com/new-projects.html" rel="alternate"></link><published>2004-05-14T04:57:00-04:00</published><updated>2004-05-14T04:57:00-04:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-05-14:/new-projects.html</id><summary type="html">&lt;p&gt;I remember, when I was young and foolish, that I was always excited at
the beginning of a new project. I saw the opportunity to create
something new and perfect. I expected to learn new things with new
friends. I was always optimistic.&lt;/p&gt;
&lt;p&gt;Now things are much different. When a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I remember, when I was young and foolish, that I was always excited at
the beginning of a new project. I saw the opportunity to create
something new and perfect. I expected to learn new things with new
friends. I was always optimistic.&lt;/p&gt;
&lt;p&gt;Now things are much different. When a new project starts, I notice the
lack of focus and of a unified vision. I see the counter-productive
agendas of the stakeholders. I wonder if the people I'm working with
know what they are doing. I see people setting one another up to take
the fall when things go badly.&lt;/p&gt;
&lt;p&gt;Am I too jaded and cynical, or just realistic? I don't know. But I do
know that I dread new projects. I don't think it is fear of the unknown
causing my dread; I think it is recognition of bad things I've seen
before and expectation that history will repeat itself.&lt;/p&gt;
&lt;p&gt;Ignorance is bliss.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>What to Do Differently This Time</title><link href="http://undefinedvalue.com/what-to-do-differently-this-time.html" rel="alternate"></link><published>2004-05-11T01:47:00-04:00</published><updated>2004-05-11T01:47:00-04:00</updated><author><name>Kris Johnson (noreply@blogger.com)</name></author><id>tag:undefinedvalue.com,2004-05-11:/what-to-do-differently-this-time.html</id><summary type="html">&lt;p&gt;Now that I am going to be a "lead" again, I'm reviewing what I've done
wrong in the past. My last stint as a manager was the worst professional
experience of my life, and I don't want to repeat it.&lt;/p&gt;
&lt;p&gt;One good thing about my new project is that I'm …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now that I am going to be a "lead" again, I'm reviewing what I've done
wrong in the past. My last stint as a manager was the worst professional
experience of my life, and I don't want to repeat it.&lt;/p&gt;
&lt;p&gt;One good thing about my new project is that I'm getting in at the
beginning. I'll understand the history better and I'll have some
influence on the overall plan. Also, we don't yet have requirements, a
budget, or deadline. I'm sure budgets and deadlines will be imposed soon
enough, but this time I'll know I should quit instead of accepting an
impossible task.&lt;/p&gt;
&lt;p&gt;I've started by writing a set of use cases and learning all I can about
the prototypes and the envisioned solution technologies. The use cases
have been helpful in determining what I don't understand. This is one of
those products where everything is easy when stuff works, but there are
lots of ways it won't work, so the use cases give me a place to explore
all the various kinds of error processing we will have to provide.&lt;/p&gt;
&lt;p&gt;Our organization has a terrible "process" for software development, and
so of course everyone is insisting that this is the project where we can
start to do some things right. That sounds nice, but I have to be
realistic: a good process doesn't get created overnight just because
somebody wants it. There is no agreement among the principals about what
a good process would be, so I am not hopeful that a single set of rules
will be adopted by everyone. My reaction to this will be to focus on
agile processes, and then try to make them look like whatever processes
the higher-ups starting asking for.&lt;/p&gt;
&lt;p&gt;I'm going to delegate a lot more responsibility to others this time
around. Last time I was a manager, I tried to do all the hard work
myself, and to help everyone else with the rest of the work. That really
burned me out. So this time, I'll assign myself a reasonable amount of
work, and assign everyone else a reasonable amount of work, and I won't
try to do anyone else's job.&lt;/p&gt;
&lt;p&gt;I plan to focus my own work on design and implementation of
"infrastructure" types of stuff. I hope this keeps me in the center of
things. Of course the danger is that I'll make myself a critical
resource, which is bad for a manager to be, so I'll be sure to involve
others in what I'm working on. I'd like to do pair programming, but I'm
not sure whether this company's culture will accept it.&lt;/p&gt;
&lt;p&gt;Finally, the most important thing I learned from last time is that this
project is not my life. It's just another computer system that will make
money for some people I don't know. It's not going to change the world.
Nothing important is lost if I don't get it done. It's not worth
sacrificing myself to complete it.&lt;/p&gt;</content><category term="managing"></category></entry><entry><title>Managing Again</title><link href="http://undefinedvalue.com/managing-again.html" rel="alternate"></link><published>2004-05-07T03:07:00-04:00</published><updated>2004-05-07T03:07:00-04:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-05-07:/managing-again.html</id><summary type="html">&lt;p&gt;Why do they keep doing this to me? I was just minding my own business,
writing buggy software more slowly than expected. But they've made me a
manager again. I'm the "lead engineer" on a "highly visible" project.
It's a "great opportunity", generating "a lot of excitement" in upper
management …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Why do they keep doing this to me? I was just minding my own business,
writing buggy software more slowly than expected. But they've made me a
manager again. I'm the "lead engineer" on a "highly visible" project.
It's a "great opportunity", generating "a lot of excitement" in upper
management levels. It "could lead to other things".&lt;/p&gt;
&lt;p&gt;Time to start looking for another job, I guess.&lt;/p&gt;</content><category term="managing"></category><category term="rant"></category></entry><entry><title>Too Busy</title><link href="http://undefinedvalue.com/too-busy.html" rel="alternate"></link><published>2004-05-04T03:05:00-04:00</published><updated>2004-05-04T03:05:00-04:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-05-04:/too-busy.html</id><summary type="html">&lt;p&gt;I hate to neglect my blog, but I've been too busy the past couple of
months. According to my timesheets, I've been working over 250
hours/month. This needs to change.&lt;/p&gt;
&lt;p&gt;Being deluged with too much work has got me thinking about my desired
amount of work. I know that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I hate to neglect my blog, but I've been too busy the past couple of
months. According to my timesheets, I've been working over 250
hours/month. This needs to change.&lt;/p&gt;
&lt;p&gt;Being deluged with too much work has got me thinking about my desired
amount of work. I know that for a lot of people, the desired amount of
work is "none". But that's not me. I like to have things to do, some
goals, and some deadlines. I like to feel that I'm doing something that
others find useful. This is probably driven by some juvenile need for
validation and acceptance, but whatever it is, I need it.&lt;/p&gt;
&lt;p&gt;I hate having too much work as much as anyone does. Whenever I have to
work 80 hours in a week, I start fantasizing about writing that perfect
resignation letter, or about screaming at the boss. After the indulgence
in fantasy wears out, I update my resume and look at job postings.&lt;/p&gt;
&lt;p&gt;But even that is a fantasy. From experience, I know that the other jobs
are just as bad as the one I have.&lt;/p&gt;
&lt;p&gt;I do notice that the project managers and salespeople aren't working 80
hours a week. That gives me some ideas for desirable career paths.&lt;/p&gt;</content><category term="rant"></category></entry><entry><title>I Suck</title><link href="http://undefinedvalue.com/i-suck.html" rel="alternate"></link><published>2004-03-31T06:06:00-05:00</published><updated>2004-03-31T06:06:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-03-31:/i-suck.html</id><summary type="html">&lt;p&gt;Well, my project at work is nearing its deadline, which means we are all
working 70-80 hours a week without any days off.&lt;/p&gt;
&lt;p&gt;This is dumb. Dumb, dumb, dumb. I'm stupid for doing it, and the people
I work with are just as stupid. But we're doing it anyway. Why …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, my project at work is nearing its deadline, which means we are all
working 70-80 hours a week without any days off.&lt;/p&gt;
&lt;p&gt;This is dumb. Dumb, dumb, dumb. I'm stupid for doing it, and the people
I work with are just as stupid. But we're doing it anyway. Why?&lt;/p&gt;
&lt;p&gt;Of course, the only reason I'm doing it is because everyone else is
doing it. I know I am not more productive this way. I know my
assignments won't get done any faster. I know I'm burning myself out
without good reason. I know it's the incompetent managers who should be
suffering rather than me. But here I am, tired, pissed-off, and
fantasizing about the perfect resignation letter.&lt;/p&gt;
&lt;p&gt;I often think that I've matured as a developer (and as a person). I
think that I've learned my lessons and will not repeat past mistakes.
And then I make the same mistakes over again. What's worse: making a
mistake I've never made before, or making the same mistake again and
again? What the hell is wrong with me?&lt;/p&gt;
&lt;p&gt;I'm weak. I don't have the courage to say "No", or to ask "Remember what
complete shit we created the last time we worked ourselves to
exhaustion?" I've spent the past six months trying to fix all the stuff
we threw together at the last minute from the last project, and now I
know we're setting ourselves up for another six months of bug fixing on
this project.&lt;/p&gt;
&lt;p&gt;I'm on autopilot. I'm just doing what's expected of me. I look at the
list of fifty things that need to get done in the next week, and instead
of saying "This is impossible," I just go on to the next item.&lt;/p&gt;
&lt;p&gt;Maybe next time I'll do the right thing. But this time, I'm sticking
with what is familiar. I'm an idiot.&lt;/p&gt;</content><category term="rant"></category></entry><entry><title>Adaptable Developers</title><link href="http://undefinedvalue.com/adaptable-developers.html" rel="alternate"></link><published>2004-03-10T03:53:00-05:00</published><updated>2004-03-10T03:53:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-03-10:/adaptable-developers.html</id><summary type="html">&lt;p&gt;The MSDN feed indicates that there are several new walkthroughs
available today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual Basic .NET and Visual Studio .NET 2003&lt;/li&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual C# .NET and Visual Studio .NET 2003&lt;/li&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual Basic .NET and ASP.NET Web …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The MSDN feed indicates that there are several new walkthroughs
available today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual Basic .NET and Visual Studio .NET 2003&lt;/li&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual C# .NET and Visual Studio .NET 2003&lt;/li&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual Basic .NET and ASP.NET Web Matrix&lt;/li&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual C# .NET and ASP.NET Web Matrix&lt;/li&gt;
&lt;li&gt;Build a Data-Driven Website Using Visual C# .NET and the .NET Framework SDK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I haven't looked at these articles, but I assume they contain the same
information, except some are in C# and some are in VB.NET, and some use
Visual Studio .NET and the others use different tools. At first I
wondered why there is not a "Build a Data-Driven Website Using Visual
Basic .NET and the .NET Framework SDK" (the one missing combination),
but then I realized that VB .NET developers are assumed to be incapable
of using command-line tools.&lt;/p&gt;
&lt;p&gt;At first I was pissed off at the MSDN folks for once again promulgating
the belief that VB .NET programmers can't read C# (and vice versa), or
that a Web Matrix programmer won't be able to figure out which menu
items to use to create an application, having only been led step-by-step
through the Visual Studio process. But of course, the MSDN folks have to
do this because &lt;em&gt;there really are&lt;/em&gt; a lot of developers who are unable or
unwilling to make sense out of code that is not in the one language they
know, or who don't know their tools well enough to use them after being
shown a demonstration with a similar tool.&lt;/p&gt;
&lt;p&gt;I have some sympathy when a C programmer has trouble reading Haskell, or
a Fortran programmer has trouble reading Prolog. But C# and VB.NET are
essentially the same language, with some minor syntactical differences.
If you know one of those languages, you should have no problem reading
the other unless you are either incredibly stupid or incredibly
closed-minded. If you can't figure out that a "project" in one IDE is
like a "solution" in another IDE, then please find another career so I
won't risk running into you someday.&lt;/p&gt;
&lt;p&gt;If you are learning .NET, you should be able to read C#, VB.NET, and
JScript.NET with equal facility. C programmers and C++ programmers
should have no trouble reading one anothers' code, nor should Lisp and
Scheme programmers, or Smalltalk and Ruby programmers. If you are
unwilling to learn even a little about things at the boundaries of your
existing knowledge, you have no business calling yourself a professional
or being proud of your skills, no matter what field you are in.&lt;/p&gt;
&lt;p&gt;I look forward to the day when MSDN could publish an article called
"Build a Data-Driven Website Using .NET", without the need to focus on
specific languages or specific tools. I know that day will never come,
so I'll have to settle for finding colleagues who would be capable of
understanding such an article.&lt;/p&gt;</content><category term="msdn"></category><category term="dotnet"></category><category term="csharp"></category><category term="programming"></category></entry><entry><title>Helicopter vs. Lamp: No Winner</title><link href="http://undefinedvalue.com/helicopter-vs-lamp-no-winner.html" rel="alternate"></link><published>2004-03-06T22:44:00-05:00</published><updated>2004-03-06T22:44:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-03-06:/helicopter-vs-lamp-no-winner.html</id><summary type="html">&lt;p&gt;I've reached the point where I can "hover out" a battery pack. That is,
I can hover the helicopter without crashing until the battery runs out.
This is much harder than it might sound. Hovering a micro-helicopter is
much like riding a unicycle, with an extra dimension. Keeping the thing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've reached the point where I can "hover out" a battery pack. That is,
I can hover the helicopter without crashing until the battery runs out.
This is much harder than it might sound. Hovering a micro-helicopter is
much like riding a unicycle, with an extra dimension. Keeping the thing
steady for a few minutes takes a lot of concentration, and is mentally
exhausting. It's taken several weeks of practice, but I can do it.&lt;/p&gt;
&lt;p&gt;So I decided to try something more interesting: take off from the dining
room floor and land on the living room coffee table. I've got a small
apartment, so this is a flight of only twelve or fifteen feet, but it
was my first attempt to travel from a point A to a different point B.
This also tests my altitude control, as I need to pass over some
furniture to get to the coffee table. The coffee table is pretty big, so
landing shouldn't be too difficult.&lt;/p&gt;
&lt;p&gt;I took off smoothly. The helicopter kept drifting to the left. I should
have landed and adjusted the trim, but decided to just keep going. I
made it about halfway to the destination, but the leftward drift took
the helicopter into a tabletop lamp. The crash was pretty spectacular,
as parts flew in all directions.&lt;/p&gt;
&lt;p&gt;The lamp shade looked bad, but was easy to fix. It is covered with
frilly fabric, and I was able to adjust it so that the frills looked
fine.&lt;/p&gt;
&lt;p&gt;The chopper needs a little work. I broke the tail rotor into two pieces,
but I already have a replacement part. The landing gear broke as well,
but that gear has been breaking continuously. It's a common problem with
the Ikarus Piccolo landing gear: after it breaks once, it will break on
any hard landing.&lt;/p&gt;
&lt;p&gt;So I need to balance a new tail rotor and wait for the glue on the
landing gear to dry. I'll be flying again later tonight. I may move the
lamp before I try.&lt;/p&gt;</content><category term="helicopter"></category></entry><entry><title>Installing QNX 4</title><link href="http://undefinedvalue.com/installing-qnx-4.html" rel="alternate"></link><published>2004-03-03T05:38:00-05:00</published><updated>2004-03-03T05:38:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-03-03:/installing-qnx-4.html</id><summary type="html">&lt;p&gt;I installed &lt;a href="http://www.qnx.com"&gt;QNX&lt;/a&gt; 4 on a machine today, for some
upcoming embedded systems work. This is not the first time I've
installed it, but of course I didn't take any notes the last time I did
it, so it was almost a new experience.&lt;/p&gt;
&lt;p&gt;My first hurdle was figuring out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I installed &lt;a href="http://www.qnx.com"&gt;QNX&lt;/a&gt; 4 on a machine today, for some
upcoming embedded systems work. This is not the first time I've
installed it, but of course I didn't take any notes the last time I did
it, so it was almost a new experience.&lt;/p&gt;
&lt;p&gt;My first hurdle was figuring out how to run the installer. The
installation program runs on Windows, but the machine where I wanted to
install only had Linux.&lt;/p&gt;
&lt;p&gt;"No problem," I thought, "it's a bootable CD, so I can just boot from
that". My next hurdle was the discovery that while the machine had a
CD-ROM drive inside it, there were no power or data cables connected to
it. And there was a good reason for that: the drive didn't have an IDE
interface, but something with a whole lot more pins than any ribbon
cable I could find. So I scrounged up another CD-ROM drive and plugged
it in. Then it took several minutes of rebooting and cursing before I
had to conclude that the ancient BIOS on that 300 MHz Pentium II machine
wouldn't let one boot from the CD.&lt;/p&gt;
&lt;p&gt;I was starting to think I'd have to install Windows on that machine just
so I could run the installer for QNX. This would have been a problem,
because this was a CD-ROM drive, and we only have DVDs for installing
Windows. But poking through the contents of the CD, I found a .BAT file
that would create a bootable floppy for installing a demo version of
QNX. I didn't want a demo version, but a few more minutes of poking
around (and guessing) led me to discover how to create a bootable floppy
for installing the full QNX.&lt;/p&gt;
&lt;p&gt;So, finally I booted the floppy and went through the QNX installation. I
actually had to do this twice, because the first time I couldn't figure
out how to delete all the Linux partitions to make the entire hard drive
a QNX partition. But I eventually had a bootable QNX box.&lt;/p&gt;
&lt;p&gt;The last problem was getting a working network interface. The machine
(which I inherited from a recently departed colleague) had both built-in
Ethernet on the motherboard and a PCI Ethernet card. I tried configuring
both interfaces for DHCP and plugging both into my switch, but neither
card was able to retrieve an IP address. I won't bore anyone with the
details (assuming they are not thoroughly bored already), but I
eventually figured out that there was no driver for the card, and
removing it let the built-in Ethernet port start working. I had to give
it a static IP address at first, but eventually got it doing DHCP by
ignoring the nice network-configuration GUI and instead using
"dhcp.client -h mymachine -i en0 &amp;amp;".&lt;/p&gt;
&lt;p&gt;So it wasn't impossible, but this illustrates one of the reasons Windows
is going to remain popular. I've heard people with horror stories about
Windows installs, but every one I've done has been basically (a) boot
with the CD, (b) follow the onscreen instructions, (c) OK, everything
works. Sure, QNX is not a "consumer" operating system, and a lot of my
problems were related to having ancient hardware, but still, I think it
should have been easier.&lt;/p&gt;</content><category term="qnx"></category></entry><entry><title>My Evil Web Site</title><link href="http://undefinedvalue.com/my-evil-web-site.html" rel="alternate"></link><published>2004-02-28T20:26:00-05:00</published><updated>2004-02-28T20:26:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-02-28:/my-evil-web-site.html</id><summary type="html">&lt;p&gt;Using the &lt;a href="http://homokaasu.org/gematriculator/"&gt;Gematriculator&lt;/a&gt;, I am
shocked to discover that my web site &lt;a href="http://kristopherjohnson.net/"&gt;http://kristopherjohnson.net/&lt;/a&gt; is
60% evil.&lt;/p&gt;
&lt;p&gt;Luckily, my blog is currently 69% good, and my
&lt;a href="http://kristopherjohnson.net/kjresume.html"&gt;resumé&lt;/a&gt; is only 34% evil,
so I may have hope for salvation.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://homokaasu.org/gematriculator/?referer"&gt;&lt;img alt="This site is certified 33% EVIL by the
Gematriculator" src="http://homokaasu.org/pics/g/e33.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Using the &lt;a href="http://homokaasu.org/gematriculator/"&gt;Gematriculator&lt;/a&gt;, I am
shocked to discover that my web site &lt;a href="http://kristopherjohnson.net/"&gt;http://kristopherjohnson.net/&lt;/a&gt; is
60% evil.&lt;/p&gt;
&lt;p&gt;Luckily, my blog is currently 69% good, and my
&lt;a href="http://kristopherjohnson.net/kjresume.html"&gt;resumé&lt;/a&gt; is only 34% evil,
so I may have hope for salvation.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://homokaasu.org/gematriculator/?referer"&gt;&lt;img alt="This site is certified 33% EVIL by the
Gematriculator" src="http://homokaasu.org/pics/g/e33.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="funny"></category><category term="evil"></category></entry><entry><title>NYC Crosswalk Buttons Don't Do Anything</title><link href="http://undefinedvalue.com/nyc-crosswalk-buttons-dont-do-anything.html" rel="alternate"></link><published>2004-02-28T20:25:00-05:00</published><updated>2004-02-28T20:25:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-02-28:/nyc-crosswalk-buttons-dont-do-anything.html</id><summary type="html">&lt;p&gt;Years ago, I worked on the New York City Vehicular Traffic Control
System (VTCS), the system that controls several thousand computerized
traffic signal throughout the five boroughs. Slashdot had an article
today about a NY Times
&lt;a href="http://www.nytimes.com/2004/02/27/nyregion/27BUTT.html?ex=1078462800&amp;amp;en=39bb50fe4af084ea&amp;amp;ei=5062&amp;amp;partner=GOOGLE"&gt;article&lt;/a&gt;
that says few of the crosswalk buttons actually work.&lt;/p&gt;
&lt;p&gt;It's not the first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Years ago, I worked on the New York City Vehicular Traffic Control
System (VTCS), the system that controls several thousand computerized
traffic signal throughout the five boroughs. Slashdot had an article
today about a NY Times
&lt;a href="http://www.nytimes.com/2004/02/27/nyregion/27BUTT.html?ex=1078462800&amp;amp;en=39bb50fe4af084ea&amp;amp;ei=5062&amp;amp;partner=GOOGLE"&gt;article&lt;/a&gt;
that says few of the crosswalk buttons actually work.&lt;/p&gt;
&lt;p&gt;It's not the first time I've read a Times article related in some way to
that system. We made the paper a few times during system deployment,
when traffic got snarled throughout the city. What proud feelings we
had, knowing what an effect our work had on the lives of millions of
people.&lt;/p&gt;
&lt;p&gt;If I was malicious and uncaring, I could tell everyone about a lot of
other aspects of the traffic system that may not work as some people
would expect, or about some of the politics surrounding design and
deployment (hint: the traffic system exists primarily as a source of
unionized jobs; helping people move around the City is just a
side-effect). But that would eliminate work for Times reporters, so I'll
just leave them guessing.&lt;/p&gt;</content><category term="traffic"></category></entry><entry><title>Branching and Merging</title><link href="http://undefinedvalue.com/branching-and-merging.html" rel="alternate"></link><published>2004-02-28T16:45:00-05:00</published><updated>2004-02-28T16:45:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-02-28:/branching-and-merging.html</id><summary type="html">&lt;p&gt;A few months ago, we started developing a new product that was a major
extension of an existing product. While we may have been able to keep
one codeline that supported both the old product and the new product,
many factors led us to decide to branch the codeline. I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few months ago, we started developing a new product that was a major
extension of an existing product. While we may have been able to keep
one codeline that supported both the old product and the new product,
many factors led us to decide to branch the codeline. I have continued
to maintain the old codeline for existing deployments, while I and a
group of others have worked on the new codeline.&lt;/p&gt;
&lt;p&gt;In the new codeline, we have tried to correct many of our past sins. The
original product was developed under a tight deadline with vague
requirements and insufficient testing, and the codeline reflects that.
The new codeline has some significant architectural changes in addition
to having the new features.&lt;/p&gt;
&lt;p&gt;I have been trying to keep things in sync between old and new. When we
find and fix a bug in one codeline, or when a feature change is made
that is desirable for both codelines, I merge that change into the
other. This was easy at first, but as the underlying architectures
diverge, it has become more difficult.&lt;/p&gt;
&lt;p&gt;One problem is that we are using SourceSafe, and I can't find any good
features for assisting in analyzing the differences between branches to
intelligently decide what needs to be merged and what does not. At the
level of individual files, branches can be merged, but I can't find an
easy way to get a report of all changed for all files in both codelines
and to merge individual sets of changes. (Maybe SS has better features,
but I can't find them.) So we have had an informal manual process, which
relies on other people telling me about things that have to be merged,
and on my having time to do the merge.&lt;/p&gt;
&lt;p&gt;This situation sucks, so what I decided to do about it was to write some
Python scripts to help me. The first script I've written just compares
the files in two directories, and writes diff files to a third
directory. My hope was that this would give me a list of a dozen or so
non-matching files, and I could spend the weekend getting everything
back in shape. I'd then just run the script every few days to find new
changes.&lt;/p&gt;
&lt;p&gt;Unfortunately, when I ran the script, I found that the number of
non-matching files was 135. Each codeline also has a few dozen files
that are unique (that is, not corresponding to a file in the other
project). Clearly, this is going to take more than a weekend.&lt;/p&gt;
&lt;p&gt;I'm not sure exactly what I should have done to prevent things from
getting so bad. Obviously, having one person (myself) be the only person
working on synchronization between the codelines was a problem. Not
having automated unit tests is another factor, because without such
tests, it is dangerous to have changes merged back and forth without a
lot of analysis. A better version-control tool would have helped,
particularly one that supports merging an identifiable set of related
changes to multiple files rather than forcing an all-or-nothing merge of
all changes on a file-by-file basis.&lt;/p&gt;
&lt;p&gt;Ultimately the core problem is that our original codeline had to be
thrown together hastily, leading to code that is difficult to adapt to
our new requirements while still meeting the old requirements. So I can
blame management for not giving us sufficient time. Unfortunately,
management isn't going to fix my problem for me, so I'll be working this
weekend.&lt;/p&gt;
&lt;p&gt;(For another story about branching/merging issues, I recommend the story
of &lt;a href="http://weblogs.asp.net/Rick_Schaut/archive/2004/02/26/80193.aspx"&gt;Mac Word 6.0&lt;/a&gt;.)&lt;/p&gt;</content><category term="versioncontrol"></category><category term="programming"></category><category term="sourcesafe"></category></entry><entry><title>What Can One Person Do?</title><link href="http://undefinedvalue.com/what-can-one-person-do.html" rel="alternate"></link><published>2004-02-28T16:43:00-05:00</published><updated>2004-02-28T16:43:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-02-28:/what-can-one-person-do.html</id><summary type="html">&lt;p&gt;I'm all in favor of teamwork. I like the sharing of ideas, the
leveraging of individuals' skills, and the camraderie that comes from
working with other people. However, I notice that a lot of my work
habits are focused on insulating myself from others.&lt;/p&gt;
&lt;p&gt;It's not that I avoid other …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm all in favor of teamwork. I like the sharing of ideas, the
leveraging of individuals' skills, and the camraderie that comes from
working with other people. However, I notice that a lot of my work
habits are focused on insulating myself from others.&lt;/p&gt;
&lt;p&gt;It's not that I avoid other people, or that I try to keep them away from
me. Rather, a lot of my habits are focused on eliminating any dependence
upon others. I keep everything I can on my own machine, in case the
network goes down. I keep my own backups of important files. I know how
to set up the server software on my own machine in case the real
development server goes down or gets funky. When something breaks, I
tend to fix it myself and then notify others later, rather than
co-ordinating with them first.&lt;/p&gt;
&lt;p&gt;While this self-reliance and initiative keeps me out of a lot of jams, I
wonder if it interferes with teamwork. Would we work more closely
together if we were more dependent on one another? Are we each doing a
lot of redundant work to keep ourselves self-reliant?&lt;/p&gt;
&lt;p&gt;Being dependent upon others is a little scary, as is having others
depend upon you. You never know how they might unintentionally mess you
up, and there may even be a few who will do with it intentional malice.
But I have learned that I can trust others. If I ever think I can't
trust my co-workers, it will be time to find another job.&lt;/p&gt;
&lt;p&gt;Even with that trust in others, I am going to continue my self-reliant
habits. Groups don't really accomplish things; individuals do, and I
want to be an effective individual.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Considering an MBA Program</title><link href="http://undefinedvalue.com/considering-an-mba-program.html" rel="alternate"></link><published>2004-02-24T15:14:00-05:00</published><updated>2004-02-24T15:14:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-02-24:/considering-an-mba-program.html</id><summary type="html">&lt;p&gt;Lately, I've been thinking a lot about going for an MBA. A few years
ago, I would never have considered such a thing, but now it seems like a
solution to several "forces" in my life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I'd like to go back to school.&lt;/strong&gt; I think I'd like being in an …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Lately, I've been thinking a lot about going for an MBA. A few years
ago, I would never have considered such a thing, but now it seems like a
solution to several "forces" in my life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I'd like to go back to school.&lt;/strong&gt; I think I'd like being in an environment where I am learning things and interacting with other students. I think I wasted my time in undergraduate studies, being so shy that I never talked to other students or to my professors, and would like to try a different tack this time around.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I have an entrepreneurial bent.&lt;/strong&gt; Whenever I read books or articles that describe what makes a good entrepreneur, I see myself.  I am tired of working for other people. I am independent. I want to choose what I work on. Of course, I also lack some of the good entrepreneurial skills, which is why I'd like to learn more about business.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;My career has reached a dead end.&lt;/strong&gt; All anyone wants to pay me to do is to write C++ GUI applications. That was interesting the first few dozen times I did it, but now there is no joy in it. And when I look around the IT industry, I don't see anything that I want to get into. I need a change, and I don't know exactly what I want to do, so learning more about business seems like something that could help me find a new direction. Even if I don't figure out what I want, having an MBA and a technical background will probably keep me hireable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;People are trying to make me into a manager anyway.&lt;/strong&gt; I keep getting pushed into management jobs, and into situations where I am doing business planning, marketing, etc. My primary objection to this is that I have no idea what I'm doing when thrust into those roles. Some formal education in the subject would ease my concerns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The University of Georgia has an evening MBA program at a location close
to me. So I figure it can't hurt to sign up for a semester's worth of
classes and see whether this is for me. If not, it's just a couple grand
down the drain.&lt;/p&gt;</content><category term="education"></category><category term="mba"></category></entry><entry><title>My R/C Helicopter</title><link href="http://undefinedvalue.com/my-rc-helicopter.html" rel="alternate"></link><published>2004-02-07T17:39:00-05:00</published><updated>2004-02-07T17:39:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-02-07:/my-rc-helicopter.html</id><summary type="html">&lt;p&gt;I've had my &lt;a href="http://www.pgoelz.com/piccolo1.html"&gt;Piccolo R/C model helicopter&lt;/a&gt; for a couple of weeks
now. I've had a total flying time of about 60 seconds. The average
flight lasts two or three seconds, and many of them end in a "crash",
which I define as "a landing that makes me wait …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've had my &lt;a href="http://www.pgoelz.com/piccolo1.html"&gt;Piccolo R/C model helicopter&lt;/a&gt; for a couple of weeks
now. I've had a total flying time of about 60 seconds. The average
flight lasts two or three seconds, and many of them end in a "crash",
which I define as "a landing that makes me wait for glue to dry before I
can fly again". But they say any landing you can walk away from is a
good one, and I've walked away from them all.&lt;/p&gt;
&lt;p&gt;I've spent about $50 for replacement parts over these two weeks (I've
broken the swashplate, the tail rotor, the main rotor and one of the
push rods). I've also preemptively purchased $50 worth of additional
parts that I expect to need in the coming weeks. I was grounded for four
days waiting for parts to arrive, so I'm planning ahead.&lt;/p&gt;
&lt;p&gt;It's been a lot of fun. I haven't built any models since I was a
teenager, so putting this thing together was almost a new experience.
The instructions were clear enough to follow, but also cryptic enough
that I had to figure out many things for myself. I had to develop my own
assembly techniques for manipulating small parts; I never thought I'd be
able to get the 1.5-mm-long bolts screwed into the right places with my
normal-sized hands and tools, but I did it.&lt;/p&gt;
&lt;p&gt;The one thing I haven't quite figured out is the Piccoboard, a little
printed-circuit board that handles the mixing of main rotor and tail
rotor throttles. It has a couple of potentiometers to be adjusted, and
I'm not sure I'm doing it right. It seems that any adjustment either has
no effect or has a disasterous effect. More experimentation is needed.&lt;/p&gt;
&lt;p&gt;Most of my flying has been inside my apartment, which is really too
small for a beginning helicopter pilot (hence the frequent crashes). The
chopper hasn't done much damage to my walls or furniture. There is a
nice open area in the parking lot where I have flown a few times, but it
has been pretty windy lately.&lt;/p&gt;
&lt;p&gt;I don't quite have the hang of stable hovering yet, but I'm pretty sure
I'll be able to do it pretty soon. Using the computer simulator has
helped me get accustomed to the controls, but controlling a real
helicopter in front of me is a lot different from controlling an
onscreen copter. I never have to worry about flying the helicopter into
my own body with the simulator, whereas that is a constant concern with
the real one. But the real one is actually a little easier, because I
can use binocular vision and my ears to get a better sense of what the
heli is doing and where it is heading.&lt;/p&gt;
&lt;p&gt;Having a little helicopter is really cool. I've found that I get a lot
less frustrated at work these days, because I'm always thinking about
that next flight.&lt;/p&gt;</content><category term="helicopter"></category></entry><entry><title>Stick with the Defaults</title><link href="http://undefinedvalue.com/stick-with-the-defaults.html" rel="alternate"></link><published>2004-01-31T05:42:00-05:00</published><updated>2004-01-31T05:42:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-31:/stick-with-the-defaults.html</id><summary type="html">&lt;p&gt;"It crashes in the call to bpGetStatus()."&lt;/p&gt;
&lt;p&gt;"Do you have structure-packing set to 1?"&lt;/p&gt;
&lt;p&gt;"Uh, no. Let me try that..."&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Five minutes later:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;"OK, now it crashes the output routine."&lt;/p&gt;
&lt;p&gt;"Are you using the standard library?"&lt;/p&gt;
&lt;p&gt;"Yes. Why?"&lt;/p&gt;
&lt;p&gt;"You need to use the Gee-Cool-Whizzy port of the STL. I'll e-mail …&lt;/p&gt;</summary><content type="html">&lt;p&gt;"It crashes in the call to bpGetStatus()."&lt;/p&gt;
&lt;p&gt;"Do you have structure-packing set to 1?"&lt;/p&gt;
&lt;p&gt;"Uh, no. Let me try that..."&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Five minutes later:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;"OK, now it crashes the output routine."&lt;/p&gt;
&lt;p&gt;"Are you using the standard library?"&lt;/p&gt;
&lt;p&gt;"Yes. Why?"&lt;/p&gt;
&lt;p&gt;"You need to use the Gee-Cool-Whizzy port of the STL. I'll e-mail you
the URL."&lt;/p&gt;
&lt;p&gt;"OK, I'll try that..."&lt;/p&gt;
&lt;p&gt;Don't do this to people. The default settings for many compilers and
IDEs are perfectly reasonable. If you are going to use some bizarre
settings, write up a document or something to explain what other have to
do (and explain &lt;em&gt;why&lt;/em&gt; while you're at it). The rest of us will
appreciate it.&lt;/p&gt;
&lt;p&gt;But even better, don't use bizarre settings. I've never understood why
some people go to such lengths to find what they consider to be the
perfect set of compiler flags for their particular application. If
proper operation of the program depends upon some strange set of
compiler options, then it is almost certain that the programmer is doing
something (a) non-standard, (b) tricky, (c) incompatible with other
people's code, and (d) that is going to break when moved to another
platform or another compiler. If proper operation doesn't depend on a
strange set of compiler options, then why use them at all?&lt;/p&gt;
&lt;p&gt;There are exceptions to this rule. For example, Visual C++'s default
settings are to statically link to a single-threaded version of the C++
runtime. For real work, almost everyone uses dynamic linking to the
multithreaded DLL. But this is not really an exception: if &lt;em&gt;everyone&lt;/em&gt;
uses the same non-default setting, then you can consider it to be a
standard.&lt;/p&gt;
&lt;p&gt;Whenever you are doing something that nobody else does, and which makes
life more difficult for everyone else, you really need to ask yourself
whether you are doing the right thing. Usually, the answer will be &lt;em&gt;No&lt;/em&gt;.
Sometimes following the herd is best for everyone.&lt;/p&gt;</content><category term="rant"></category><category term="programming"></category></entry><entry><title>C++ Testing Frameworks</title><link href="http://undefinedvalue.com/c-testing-frameworks.html" rel="alternate"></link><published>2004-01-25T14:14:00-05:00</published><updated>2004-01-25T14:14:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-25:/c-testing-frameworks.html</id><summary type="html">&lt;p&gt;I've always rolled my own unit-testing frameworks for C++. I don't like
CppUnit, because it is too Java-like and not C++-like. It has always
been easier to throw together what I need than to try to figure out
someone else's framework. I can throw together the basics in ten …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've always rolled my own unit-testing frameworks for C++. I don't like
CppUnit, because it is too Java-like and not C++-like. It has always
been easier to throw together what I need than to try to figure out
someone else's framework. I can throw together the basics in ten
minutes, and then evolve the test rig as necessary.&lt;/p&gt;
&lt;p&gt;So I'm not really sure why I decided to re-examine off-the-shelf
frameworks for my current testing needs. I guess it comes down to a
desire to learn something new, and to make sure nobody else is doing
something smarter than I am.&lt;/p&gt;
&lt;p&gt;After looking around, I settled on the &lt;a href="http://www.boost.org/libs/test/doc/index.htm"&gt;Boost Test Library&lt;/a&gt;. What I like most
about this library is that it can be used by simply #include-ing a
header file; there is no need to build a library and link to it. The
Boost Test Library worked out-of-the-box. The only special thing I did
was to use a &lt;a href="http://www.codeproject.com/debug/debugout.asp"&gt;debug output stream&lt;/a&gt; so that the
output shows up in the Visual C++ output window. The output format makes
it possible to double-click a line in the output window and VC++ will
open the source file and go to the source line. There is no need for a
TestRunner-style GUI.&lt;/p&gt;
&lt;p&gt;I also ran across Michael Feathers's &lt;a href="http://c2.com/cgi/wiki?CppUnitLite"&gt;CppUnitLite&lt;/a&gt;. He created this as a
reaction to the bloat of CppUnit. CppUnitLite is intended to be just a
simple example of a testing framework, which should be modified and
extended as necessary by its users. While I like the idea of using a
simple barebones framework and modifying it as needed, CppUnitLite still
seems too complex to me.&lt;/p&gt;
&lt;p&gt;I think that C++ unit testing is one of those things where an
off-the-shelf framework never seems right. I've come to believe that
small off-the-shelf frameworks are a bad idea. The smaller the
framework, the less it does for you and the easier it would be to roll
your own that does the job better. Only really big frameworks (MFC,
etc.) provide enough value to justify spending the time to learn them.
C++ unit testing is just too easy to justify learning a framework.&lt;/p&gt;
&lt;p&gt;But I'll keep using the Boost Test Library for now. I hope I'll learn
something in the process. Using an off-the-shelf library might help me
to "test-infect" my co-workers.&lt;/p&gt;</content><category term="cplusplus"></category></entry><entry><title>Reinventing Wheels</title><link href="http://undefinedvalue.com/reinventing-wheels.html" rel="alternate"></link><published>2004-01-23T14:16:00-05:00</published><updated>2004-01-23T14:16:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-23:/reinventing-wheels.html</id><summary type="html">&lt;p&gt;I have a sudden need for a store-and-forward mechanism for a C++
application I'm working on. I'm sure countless others have done this,
and there is probably an off-the-shelf solution somewhere I could use,
but I have decided to implement one from scratch.&lt;/p&gt;
&lt;p&gt;I did spend some time on Google …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a sudden need for a store-and-forward mechanism for a C++
application I'm working on. I'm sure countless others have done this,
and there is probably an off-the-shelf solution somewhere I could use,
but I have decided to implement one from scratch.&lt;/p&gt;
&lt;p&gt;I did spend some time on Google trying to find something that would suit
my needs, but none of the hits gave me a good feeling that I would
actually save any time or effort by using an off-the-shelf product. I
have to have this feature implemented in a couple of days, or the world
is going to end (or so customer believes), so I don't have a lot of time
to figure out someone else's product, and I definitely don't have time
to wait for a bug fix. So I've satisfied myself that I am not
reinventing the wheel without good reason.&lt;/p&gt;
&lt;p&gt;The buy-vs.-build question is one that comes up often, and I am never
satisfied with my decision. I was once strongly in favor of "buy", but
after being stung by many low-quality products over the years, I now
tend to believe I can usually do better by myself.&lt;/p&gt;
&lt;p&gt;The best thing about doing it myself is that the solution will be
specifically designed for my use. I don't have to learn how to manage
all the various configuration parameters that a generic off-the-shelf
"solution" would have. I don't have to worry about whether it will be
compatible with my compiler, my OS, and the other libraries I am using.
I don't have to figure out whether it is thread-safe, or how it manages
memory, or how to properly initialize and terminate it.&lt;/p&gt;
&lt;p&gt;And of course, doing it myself is a lot more fun.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Pay Me What I'm Worth</title><link href="http://undefinedvalue.com/pay-me-what-im-worth.html" rel="alternate"></link><published>2004-01-18T18:54:00-05:00</published><updated>2004-01-18T18:54:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-18:/pay-me-what-im-worth.html</id><summary type="html">&lt;p&gt;Recently receiving a nice raise got me thinking about the relationship
between work and financial compensation.&lt;/p&gt;
&lt;p&gt;Some people claim that high salaries encourage hard work. Maybe it does
for some people, but it doesn't work that way for me. My work ethic has
little to do with how much I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently receiving a nice raise got me thinking about the relationship
between work and financial compensation.&lt;/p&gt;
&lt;p&gt;Some people claim that high salaries encourage hard work. Maybe it does
for some people, but it doesn't work that way for me. My work ethic has
little to do with how much I am being paid, or how high my taxes are.
I've always felt that if one has accepted a job, one does it as well as
possible. I expect to be paid well because I do a good job; I don't do a
good job because I want a raise. If I'm not being paid enough, I may
quit, but I won't slack off.&lt;/p&gt;
&lt;p&gt;I know people who obsess over exactly what percentage their raise was,
and how that compares to others' raises.&lt;/p&gt;
&lt;p&gt;During the 90's, I was getting raises of 20%, 25%, or more per year for
a while. Those raises were so ridiculously high that I will probably
never be able see any raise as being indicative of my abilities; they
are more a reflection of how well my employer is doing, and how much
clout my manager has.&lt;/p&gt;
&lt;p&gt;I have never chased after maximizing my income, but have been fortunate
to receive nice salaries. Making lots of money has provided a counter to
&lt;a href="http://fecolumnists.expressindia.com/full_column.php?content_id=32033"&gt;Imposter Syndrome&lt;/a&gt;.
My work must be providing some sort of value, although I've never
figured out exactly what it is. So for me, salary is symbolic of
approval and respect.&lt;/p&gt;
&lt;p&gt;As long as I'm being paid "enough", I don't worry too much about salary.
I just want to feel that I am being paid what I am worth, and right now,
I think I'm being paid a lot more than I'm worth. (But please don't tell
my boss.)&lt;/p&gt;</content><category term="self-indulgence"></category><category term="impostorsyndrome"></category><category term="money"></category></entry><entry><title>Software and Hardware</title><link href="http://undefinedvalue.com/software-and-hardware.html" rel="alternate"></link><published>2004-01-14T03:04:00-05:00</published><updated>2004-01-14T03:04:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-14:/software-and-hardware.html</id><summary type="html">&lt;p&gt;Charles Miller had an &lt;a href="http://fishbowl.pastiche.org/2004/01/14/blood_sacrifice"&gt;amusing blog entry&lt;/a&gt; about
the hazards of computers. I am currently working with development of
embedded systems software, so I spend a lot of my day plugging and
unplugging PCI cards, comm ports, etc. My hands are covered with little
scratches, cuts, and punctures.&lt;/p&gt;
&lt;p&gt;Computer programming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Charles Miller had an &lt;a href="http://fishbowl.pastiche.org/2004/01/14/blood_sacrifice"&gt;amusing blog entry&lt;/a&gt; about
the hazards of computers. I am currently working with development of
embedded systems software, so I spend a lot of my day plugging and
unplugging PCI cards, comm ports, etc. My hands are covered with little
scratches, cuts, and punctures.&lt;/p&gt;
&lt;p&gt;Computer programming is supposed to be a cushy intellectual job, but
it's amazing how much physical labor and torment programmers go through.
RSI and sore backs are common. Electric shocks are common as well. We
have to crawl around on floors to figure out which cable is connected to
what. We've all over-strained ourselves carrying around big CRTs and
servers. Many of us have had equipment racks fall on top of us.
Incidents like these stress the importance of the first syllable of
&lt;em&gt;hardware&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I've heard that there are some programmers who never have to deal with
hardware. The computer is off in some other room somewhere, and it is
someone else's job to keep it running. Somebody else installs the device
drivers, and configures the networks, and connects the keyboards and the
monitors. I've always felt that these programmers are somewhat like the
ivory-tower academics who never have to deal with the reality of
computers. Without playing with the hardware, how can one really
appreciate what the software does?&lt;/p&gt;</content><category term="programming"></category><category term="hardware"></category></entry><entry><title>Helicopters and Simulations</title><link href="http://undefinedvalue.com/helicopters-and-simulations.html" rel="alternate"></link><published>2004-01-11T19:55:00-05:00</published><updated>2004-01-11T19:55:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-11:/helicopters-and-simulations.html</id><summary type="html">&lt;p&gt;I've always been fascinated by helicopters. The way they float in the
air, and the throbbing "chop-chop-chop" provide a Zen-like experience
for me, where I can stop thinking and just &lt;em&gt;experience&lt;/em&gt; the helicopter
overhead.&lt;/p&gt;
&lt;p&gt;Actually learning to fly a helicopter would be nice, but I'm not willing
to devote the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've always been fascinated by helicopters. The way they float in the
air, and the throbbing "chop-chop-chop" provide a Zen-like experience
for me, where I can stop thinking and just &lt;em&gt;experience&lt;/em&gt; the helicopter
overhead.&lt;/p&gt;
&lt;p&gt;Actually learning to fly a helicopter would be nice, but I'm not willing
to devote the time and money required to do so. But I like models. When
I was a kid, I spent many hours/days with the Mattel
&lt;a href="http://www.whirlybirdcentral.com/downloads/7604.pdf"&gt;VertiBird&lt;/a&gt; toy
helicopter. I looked into RC helicopters a few years ago, but at the
time they were very expensive and lacking in capabilities.&lt;/p&gt;
&lt;p&gt;A couple of months ago, my interest was re-kindled when I ran across
some small electric RC helicopters designed to fly indoors. This is
perfect for me; I am an apartment dweller, and I don't have wide open
spaces available for larger RC aircraft. The thought of flying a small
chopper from room to room intrigued me. I put in on my Christmas list,
but I guess my friends and family didn't want to spend several hundred
dollars on my gift (cheap buggers). So I guess I'm going to have to buy
it myself.&lt;/p&gt;
&lt;p&gt;While reading various online pages about the mini-helicopters, I noticed
many recommendations to "use the simulator" when learning to fly. At
first I was amused to find out that there are flight simulators for
model aircraft, but it does make sense. A crash of a model can require
expensive repairs (both to the craft and to whatever it hit), so a safe
simulation is important. So I've bought the
&lt;a href="http://www.rc-soar.com/tech/piccofly.htm"&gt;simulator&lt;/a&gt;. I hope to have
several hours of simulated flight time under my belt before flying the
real model helicopter.&lt;/p&gt;
&lt;p&gt;So, my interest in real helicopters led to an interest in model
helicopters, and that in turn led to an interest in simulated model
helicopters. I'm definitely moving between meta-levels here. My only
regret is that neither the model nor the simulation is going to provide
a satisfyingly thunderous "chop-chop-chop". I guess I'll need a
simulated digitized synthesized sound effect for that.&lt;/p&gt;</content><category term="helicopter"></category></entry><entry><title>Reading Beginners' Books</title><link href="http://undefinedvalue.com/reading-beginners-books.html" rel="alternate"></link><published>2004-01-10T00:54:00-05:00</published><updated>2004-01-10T00:54:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-10:/reading-beginners-books.html</id><summary type="html">&lt;p&gt;I am reading the Pragmatic Programmers' new "Starter Pack" books. Most
of the content is nothing new to me, but I always enjoy reading good
books about the basics.&lt;/p&gt;
&lt;p&gt;I like seeing things put simply. The real world is rarely simple, and we
forget how following a few easy-to-understand principles …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am reading the Pragmatic Programmers' new "Starter Pack" books. Most
of the content is nothing new to me, but I always enjoy reading good
books about the basics.&lt;/p&gt;
&lt;p&gt;I like seeing things put simply. The real world is rarely simple, and we
forget how following a few easy-to-understand principles can help
de-complexify things. Reading beginners' books reminds me that while
software development can be chaotic, it can be kept under control.&lt;/p&gt;
&lt;p&gt;Reading well-written books for beginners gives me pointers on how to
better explain the concepts to beginners (or to non-beginners who shoud
know better). Sometimes I even learn something new myself.&lt;/p&gt;
&lt;p&gt;Reading beginners' books reminds me of my youth. I remember where and
when I first learned these things. I try to remember what I did before I
learned the lessons. I remember how I learned the lessons - generally,
the hard way. I remember my teachers, mentors, and fellow students. I
remember the time when writing a linked-list was the most challenging
thing I had to do.&lt;/p&gt;
&lt;p&gt;The danger of reading a book for beginners is that it sometimes gives me
a false sense of mastery. "I already know everything in this book, so I
am no longer a beginner," I think, or "See, it really is just that
easy." But those false feelings don't last for long, so I don't think
that indulging in them once in a while causes any harm.&lt;/p&gt;
&lt;p&gt;Of course, the best thing about a well-written beginners' book is that
it is a well-written book. Such books are so rare that they should be
celebrated whenever they are found, no matter what the subject matter or
level of expertise required to understand them.&lt;/p&gt;</content><category term="reading"></category></entry><entry><title>Measuring "Simplest"</title><link href="http://undefinedvalue.com/measuring-simplest.html" rel="alternate"></link><published>2004-01-09T18:16:00-05:00</published><updated>2004-01-09T18:16:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-09:/measuring-simplest.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.metaprog.com/blogs/index.php?p=63&amp;amp;more=1&amp;amp;c=1&amp;amp;tb=1&amp;amp;pb=1"&gt;Joseph Pelrine&lt;/a&gt;
notes that "as Alistair Cockburn rightly states, 'simplest' has no
metric. It is not a quantifiable amount." While it is true that one
cannot put a number on it, there is an obvious test: you have the
simplest solution if nobody can think of anything simpler.&lt;/p&gt;
&lt;p&gt;Of course …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.metaprog.com/blogs/index.php?p=63&amp;amp;more=1&amp;amp;c=1&amp;amp;tb=1&amp;amp;pb=1"&gt;Joseph Pelrine&lt;/a&gt;
notes that "as Alistair Cockburn rightly states, 'simplest' has no
metric. It is not a quantifiable amount." While it is true that one
cannot put a number on it, there is an obvious test: you have the
simplest solution if nobody can think of anything simpler.&lt;/p&gt;
&lt;p&gt;Of course, different people have different ideas of what simple is. For
example, C++ templates provide simple solutions to many C++ problems,
but many C++ programmers will consider any use of templates to be
"complicated". (And some would say that C++ provides no simple solutions
for any problem!) Similarly, some prefer break up a class into many
small classes to make things simpler, whereas others think that a small
number of big classes is simpler. Who's right?&lt;/p&gt;
&lt;p&gt;Ward Cunningham wrote somewhere that his definition of &lt;em&gt;simple&lt;/em&gt; is
whatever is easiest to reason about. I would add that it is also
whatever is easiest to communicate to others. If you are trying to
explain your "simple" solution to others, and they don't get it, that is
a good sign that you haven't really found a simple solution. The reason
that XP advocates simplicity is that simple code is easier for somebody
else to understand and to modify in the future.&lt;/p&gt;
&lt;p&gt;So, when judging the simplicity of a solution, it is important to
remember that you are writing code for an audience. You have to make
some assumptions about that audience. Do they understand the language
features that you are using? Are they going to understand the idioms?
Does the code you are writing fit in with the rest of the project's code
in a way that will make sense to them?&lt;/p&gt;
&lt;p&gt;Always remember that the value of simplicity is that it makes future
change easier. The simplest solution is the one that will be easiest to
replace.&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Why Bother with .NET?</title><link href="http://undefinedvalue.com/why-bother-with-net.html" rel="alternate"></link><published>2004-01-07T14:39:00-05:00</published><updated>2004-01-07T14:39:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-07:/why-bother-with-net.html</id><summary type="html">&lt;p&gt;Someone asked me "What's the big deal about .NET? Besides the fact that
the Microsoft world is steering that way and so knowing it is probably a
good career move. Is there a specific problem that it solves that I
couldn't solve as easily with, say, Ruby or Perl?"&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Someone asked me "What's the big deal about .NET? Besides the fact that
the Microsoft world is steering that way and so knowing it is probably a
good career move. Is there a specific problem that it solves that I
couldn't solve as easily with, say, Ruby or Perl?"&lt;/p&gt;
&lt;p&gt;This is a question I asked myself a lot while &lt;a href="http://kristopherjohnson.blogspot.com/2004_01_01_kristopherjohnson_archive.html#107336832099080752"&gt;studying for the MCSD
exams&lt;/a&gt;.
The conclusion I came to was that the primary value of .NET is that it
provides a better way to write Windows programs than C++ or Visual
Basic.&lt;/p&gt;
&lt;p&gt;Over the years, I've learned that the best thing to do when developing
for Windows is to do it Microsoft's way. Third-party libraries and
development tools always end up "breaking" at some point because
Microsoft changes an API or doesn't provide sufficient information to
other vendors. When using non-Microsoft tools, it always seems like I
spend more time working around incompatibilities than getting my job
done. So I try to stick with Visual C++, MFC, COM, ODBC, etc., and
nobody gets hurt too badly.&lt;/p&gt;
&lt;p&gt;So, now Microsoft provides a Java-like development platform, and is
going to be integrating it more tightly with the OS as Longhorn comes
together. What I've read in the Microsofties' blogs leads me to think
that things are generally going in the right direction. This is good in
that C++ is no longer the best way to write Windows software. Knowing
.NET lets me write better Windows software.&lt;/p&gt;
&lt;p&gt;But aside from its ties to Windows, is .NET "better" than alternatives?
No. It has some very nice features, but I'd rather be using Python (or
Ruby, or Scheme, or Squeak, or ...).&lt;/p&gt;
&lt;p&gt;It's not that those other things are "better" than .NET. A lot of people
knock .NET because it is not innovative, and that it is just a
collection of features that have been better implemented elsewhere. I
actually find the non-innovativeness of .NET to be comforting. The fact
that Microsoft is "stealing" a lot of good ideas from other places and
isn't trying anything too radical suggests to me that .NET is going to
be a pretty usable framework. I don't want innovation; I want something
that works.&lt;/p&gt;
&lt;p&gt;The big drawback to .NET is that it will always be a Microsoft-specific
technology. Despite the efforts of open-source developers, I don't think
there will ever be an industrial-strength non-Microsoft implementation.
I'm not going to be able to run my .NET code on Linux, or Solaris, or
QNX Neutrino, or Palm OS, or another of the other operating systems I
develop software for.&lt;/p&gt;
&lt;p&gt;Is it worthwhile to learn about .NET? If you develop Windows
applications, then I would definitely recommend it. If you don't develop
Windows apps, then you may want to study .NET to see how the approached
issues differently from other platforms' designers. But I can't find
anything in .NET that makes me say "Wow! This is exactly what I've been
waiting for!"&lt;/p&gt;</content><category term="dotnet"></category></entry><entry><title>Confessional</title><link href="http://undefinedvalue.com/confessional.html" rel="alternate"></link><published>2004-01-07T03:23:00-05:00</published><updated>2004-01-07T03:23:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-07:/confessional.html</id><summary type="html">&lt;p&gt;I committed several developer sins today. (Actually, I only committed a
couple today; the others were committed in the past but came to light
today.)&lt;/p&gt;
&lt;p&gt;First, I assumed that the bug was in the other guy's code. I was sure
there could be nothing wrong in my simple straightforward
object-oriented …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I committed several developer sins today. (Actually, I only committed a
couple today; the others were committed in the past but came to light
today.)&lt;/p&gt;
&lt;p&gt;First, I assumed that the bug was in the other guy's code. I was sure
there could be nothing wrong in my simple straightforward
object-oriented code, so it must have been in his quagmire of
multi-threaded straight ANSI C. So I spent most of my time trying to
read his code instead of examining my own more carefully. I cursed him
for not providing documentation or unit tests.&lt;/p&gt;
&lt;p&gt;Second, I put off as long as possible the arduous task of reading
through the voluminous logging information his code generated. After
all, if he is a bad programmer it stands to reason that his log will
hold only useless information. When I finally did read through the log,
it became clear that the code I had copied-and-pasted from another
program was doing bad things.&lt;/p&gt;
&lt;p&gt;Yes, that was the original sin: I copied-and-pasted code from another
program without reviewing it sufficiently. I know it's wrong. I scream
at people when I see them do this. But it was the easiest thing to do at
the time.&lt;/p&gt;
&lt;p&gt;And when i discovered the copied-and-pasted bug, my first instinct was
to curse the name of the writer of that code I had copied. But of
course, he does not deserve my ire. The real culprit is my boss, who
suggested that copying and pasting was the fastest way to get the
feature implemented! No, that isn't right either. I committed the act;
it is my responsibility.&lt;/p&gt;
&lt;p&gt;I keep thinking I am getting better at this stuff. I think I have better
habits than others. I only break my own rules when I think it really
won't hurt anything.&lt;/p&gt;
&lt;p&gt;I am ashamed. I ask forgiveness.&lt;/p&gt;</content><category term="self-indulgence"></category><category term="programming"></category></entry><entry><title>On Being a Microsoft Certified Solution Developer</title><link href="http://undefinedvalue.com/on-being-a-microsoft-certified-solution-developer.html" rel="alternate"></link><published>2004-01-06T06:40:00-05:00</published><updated>2004-01-06T06:40:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-06:/on-being-a-microsoft-certified-solution-developer.html</id><summary type="html">&lt;p&gt;I earned the Microsoft Certified Solution Developer for .NET
certification last year. My resumé is mired in C++ and CORBA, and I
wanted something that would indicate to potential employers that I could
do something else. I missed out on the Java bandwagon, and couldn't
compete with the junior Java …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I earned the Microsoft Certified Solution Developer for .NET
certification last year. My resumé is mired in C++ and CORBA, and I
wanted something that would indicate to potential employers that I could
do something else. I missed out on the Java bandwagon, and couldn't
compete with the junior Java developers with 3+ years experience who
would work for $25/hour. So I thought being an MCSD might get me in
early on .NET development.&lt;/p&gt;
&lt;p&gt;The tests weren't the cakewalk that I had been led to believe by the
detractors of Microsoft's certification program. I agree that the tests
don't provide a good indication of whether a candidate would be a good
developer, but they do indicate that the candidate has an encyclopedic
knowledge of the .NET API and the features of Visual Studio .NET.&lt;/p&gt;
&lt;p&gt;The architecture exam, usually considered to be the toughest of the MCSD
exams, was the easiest one for me. It was the one exam where careful
reading and common sense would get you through, rather than a lot of
rote memorization.&lt;/p&gt;
&lt;p&gt;Getting the MCSD didn't help me much in getting a job. I suspect it is
actually considered a black mark by those who believe anyone taking
Microsoft's tests must be a clueless, mindless drone.&lt;/p&gt;
&lt;p&gt;I think that studying for the exams did help me to learn some things
about .NET that I would not have learned otherwise. The exam guides gave
me a plan for learning .NET, rather than just stumbling around randomly.
So that is what is of most value to me: the learning, not the piece of
paper.&lt;/p&gt;</content><category term="microsoft"></category><category term="mcsd"></category><category term="certification"></category></entry><entry><title>Assertiveness</title><link href="http://undefinedvalue.com/assertiveness.html" rel="alternate"></link><published>2004-01-03T18:58:00-05:00</published><updated>2004-01-03T18:58:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-03:/assertiveness.html</id><summary type="html">&lt;p&gt;The most significant personal change I've gone through in the past few
years is an increase in my assertiveness. I am a very different person
from who I used to be, due to this change.&lt;/p&gt;
&lt;p&gt;I am a stutterer. That, coupled with natural introversion, caused me to
grow up avoiding …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The most significant personal change I've gone through in the past few
years is an increase in my assertiveness. I am a very different person
from who I used to be, due to this change.&lt;/p&gt;
&lt;p&gt;I am a stutterer. That, coupled with natural introversion, caused me to
grow up avoiding any situation where I had to talk to anyone. Many
people fear speaking because they think they will sound stupid, but a
stutterer &lt;em&gt;knows&lt;/em&gt; he will sound stupid no matter what he is saying. All
through childhood and college, I avoided any role or situation that
required me to speak up.&lt;/p&gt;
&lt;p&gt;I was able to keep my mouth mostly shut for several years when I started
working. I only had to talk to my boss and a few co-workers. So I was
able to get things done, but I shied away from any roles or situations
where I would have to speak my mind to people outside that circle. I
also avoided looking for better jobs, because I dreaded the interview
process.&lt;/p&gt;
&lt;p&gt;Then, I got promoted. I was put in charge of development of an important
project. I faced a crisis: my job now required me to speak to clients
and higher level managers, and to tell other people what to do, but I
didn't think I could do that. I considered all sorts of ways to avoid
those responsibilities, but none made sense. So, I just decided I would
just do it, because it was my job.&lt;/p&gt;
&lt;p&gt;And a funny thing happened: it learned it was surprisingly easy. I asked
people to do things, and they did it. I explained technical issues to
clients, and they understood and believed what I was saying. I talked to
those scary upper-level managers, and they turned out to be pretty cool
guys who trusted my judgment. All my fears had been unfounded.&lt;/p&gt;
&lt;p&gt;It makes me a little sad to think about all the missed opportunities I
had before learning this simple lesson at age 35. I wish I had gone out
and played with other kids instead of sitting in my room reading books.
I wish I had taken advantage of everything that was available in
college, instead of just sitting in the back row, keeping my mouth shut,
and passing the tests. I wish I had talked to more girls when I was in
my teens and twenties. I know there's no going back, so I just have to
console myself by realizing that I won't have to miss future
opportunites. I think I've finally grown up.&lt;/p&gt;
&lt;p&gt;After my epiphany, I now have little sympathy for programmers who
complain that their managers don't let them do what they want. Managers
aren't stupid; if you think you have a good idea, then tell them about
it and fight for it. If you don't like your job, then go get a better
one.&lt;/p&gt;
&lt;p&gt;Having become assertive myself, I have a greater respect for other
assertive people. I once thought people like that were just arrogant
jerks, but now I understand that they are just fighting for their
beliefs and ideas the same way that I am. I would much rather argue with
another intelligent assertive person than to try to talk to someone who
just agrees with everything rather than presenting their own opinions.&lt;/p&gt;
&lt;p&gt;I hate to sound like a motivational speaker, but this is the one lesson
I've learned that I want to share with the world. If there is something
you want to say, then say it. If there is something you want to do, then
do it. Nobody else is going to say and do these things for you. The
course of your life is up to you.&lt;/p&gt;</content><category term="self-indulgence"></category><category term="stuttering"></category></entry><entry><title>The Making of ...</title><link href="http://undefinedvalue.com/the-making-of.html" rel="alternate"></link><published>2004-01-03T05:22:00-05:00</published><updated>2004-01-03T05:22:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-03:/the-making-of.html</id><summary type="html">&lt;p&gt;When I was a kid, I really liked the "Making of Star Wars" and similar
documentaries that gave behind-the-scenes looks at the production of
movies. These days, the "Making of ..." pieces are really just ads for
the movies, usually being released before the movie itself.&lt;/p&gt;
&lt;p&gt;But we have DVD commentary …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was a kid, I really liked the "Making of Star Wars" and similar
documentaries that gave behind-the-scenes looks at the production of
movies. These days, the "Making of ..." pieces are really just ads for
the movies, usually being released before the movie itself.&lt;/p&gt;
&lt;p&gt;But we have DVD commentary tracks. That's my favorite part of owning a
DVD player: being able to hear commentary from the directors, producers,
writers, and actors in movies. A lot of what they say reminds me of
software development. My favorite parts are when they discuss what they
would have done if they had more time and money, and make their
complaints about stuff that wound up in the movie but they really don't
like.&lt;/p&gt;
&lt;p&gt;(By the way, if you liked the movie &lt;em&gt;Fight Club&lt;/em&gt;, then you've got to
listen to the commentary tracks on the DVD. Best commentary I've heard.)&lt;/p&gt;
&lt;p&gt;I also enjoy "Inside the Actor's Studio" on the Bravo channel. Hearing
actors talk about their craft, how they learned it, and how they
continue to study it inspires me to continue improving my knowledge of
my craft.&lt;/p&gt;
&lt;p&gt;Commentary from software developers about their projects would not be as
entertaining, but I wish we had such a thing. "The Making of Windows",
as told by its developers, would certainly have some interesting bits.&lt;/p&gt;</content><category term="movies"></category></entry><entry><title>Giving The Lord of the Rings Another Chance</title><link href="http://undefinedvalue.com/giving-the-lord-of-the-rings-another-chance.html" rel="alternate"></link><published>2004-01-02T05:10:00-05:00</published><updated>2004-01-02T05:10:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-02:/giving-the-lord-of-the-rings-another-chance.html</id><summary type="html">&lt;p&gt;I didn't like &lt;em&gt;The Lord of the Rings&lt;/em&gt; when I read it as a teenager. I
loved &lt;em&gt;The Hobbit&lt;/em&gt;, but &lt;em&gt;Rings&lt;/em&gt; just bored me. It had too much singing
and story-telling, and was just too long. I lost interest before
finishing the first volume, so the other two volumes were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I didn't like &lt;em&gt;The Lord of the Rings&lt;/em&gt; when I read it as a teenager. I
loved &lt;em&gt;The Hobbit&lt;/em&gt;, but &lt;em&gt;Rings&lt;/em&gt; just bored me. It had too much singing
and story-telling, and was just too long. I lost interest before
finishing the first volume, so the other two volumes were a long slog. I
had to read it because of peer pressure (I got tired of hearing "What,
you haven't read the &lt;em&gt;Rings&lt;/em&gt; trilogy?"), but it was a lot like reading
books my teachers assigned.&lt;/p&gt;
&lt;p&gt;After seeing the three &lt;em&gt;Rings&lt;/em&gt; films, I am ready to give the books
another chance. The films were entertaining, and have given me enough
knowledge of the story and characters that I can read the books without
losing interest. I hope to enjoy all the stuff that didn't make it into
the movies, and to be able to say something intelligent when I get
trapped in one of those stupid "The movie wasn't like the book"
conversations.&lt;/p&gt;
&lt;p&gt;Who knows? If this works out, maybe I'll give that horrible &lt;em&gt;Dune&lt;/em&gt;
series another chance as well.&lt;/p&gt;</content><category term="reading"></category></entry><entry><title>Self-Reflection</title><link href="http://undefinedvalue.com/self-reflection.html" rel="alternate"></link><published>2004-01-01T04:54:00-05:00</published><updated>2004-01-01T04:54:00-05:00</updated><author><name>Kristopher Johnson</name></author><id>tag:undefinedvalue.com,2004-01-01:/self-reflection.html</id><summary type="html">&lt;p&gt;I spend a lot of time in front of reflective surfaces (computer monitors
and my TV), and so I occasionally catch a glimpse of myself when I don't
mean to look at myself. Before I realize who I am looking at, my first
impression is often that the guy looks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I spend a lot of time in front of reflective surfaces (computer monitors
and my TV), and so I occasionally catch a glimpse of myself when I don't
mean to look at myself. Before I realize who I am looking at, my first
impression is often that the guy looks pretty dull-witted, tired, and
unhappy. I hope that's not how others see me.&lt;/p&gt;
&lt;p&gt;There have been occasions when I am reading the &lt;a href="http://c2.com/cgi/wiki"&gt;C2
wiki&lt;/a&gt;, and suddenly realize I am reading
something that I wrote myself long ago. Thankfully, the impressions I
get from reading my own writing are more positive than those I get from
looking at my face. Sometimes I cringe a little, and many of my opinions
have changed dramatically, but that guy usually seems to be pretty smart
and reasonable.&lt;/p&gt;
&lt;p&gt;Who am I? What do other people think of me? Of those two questions, the
first is more important, but I'm not too proud to admit that I care a
lot about the second also. Self-knowledge and self-confidence are great,
but if other people think I'm a ninny, maybe they're right. I don't know
how to get an honest, objective assessment of myself, but the occasional
unknowing glances in the mirror may be the truest view I can get of
myself.&lt;/p&gt;
&lt;p&gt;Ultimately, that's what this blog is all about: trying to get a look at
myself and what I am doing, with a detached view. The writing itself
clarifies my thoughts for me, and when I re-read these entries in the
future, I hope to gain additional insights about who I was when I wrote,
and how I am changing.&lt;/p&gt;</content><category term="self-indulgence"></category></entry></feed>